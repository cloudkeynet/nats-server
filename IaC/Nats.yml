AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a NATS.io server on Amazon ECS

Parameters:
  ##Is the ARN of the SNS for the notifications##
    EmailNotification:
      Type: String
      Description: "email for notigfication SNS"
    InstanceType:
     Type: String
     Default: t3a.medium
     Description: Class of EC2 instance used to host containers. Choose t2 for testing, m5 for general purpose, c5 for CPU intensive services, and r5 for memory intensive services
     AllowedValues: [ t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge, t3.medium,  t3a.medium, t3.large, t3.xlarge, t3.2xlarge, t3a.large, t3a.xlarge, t3a.2xlarge
       m5.large, m5.xlarge, m5.2large, m5.4xlarge, m5.12xlarge, m5.24large,
       c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
       r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge  ]
     ConstraintDescription: Please choose a valid instance type.
  ##The maximun number of instances that can be launched un the cluster##
    MaxSize:
     Type: Number
     Default: '1'
     Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
    ECSAMI:
     Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
     Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
     Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI
  ##Is the number of EC2 instances that can be launched un the cluster##
    DesiredCapacity:
     Type: Number
     Default: '1'
     Description: Number of EC2 instances to launch in your ECS cluster.
  ##The image tag for the AI service##
    ImageTag:
     Type: String
     Description: ECR image tag for the AI service.
     AllowedPattern: .+
  ##The ARN to identify the certificate in AWS Certificate Manager for the HTTPS##
    CertificateArn:
     Type: String
     Description: "The ARN of the SSL certificate from AWS Certificate Manager (ACM) for HTTPS"
  ##Set the number of the of task that are neccesary to keep runnging on the cluster##
    ECSTaskDesiredCount:
     Default: 0
     Type: Number
     ConstraintDescription: Set the number of instantiations of the specified task definition to place and keep running on your cluster for the NATS service.
  ##Is the ID of the VPC##
    VPCID:
     Type: AWS::EC2::VPC::Id
     Description: Id of the VPC.
     AllowedPattern: .+
    EnvironmentName:
     Type: String
     Default: dev
     Description: Name of environment.
     AllowedValues: [ dev, demo, qa, sdlc, prod, preprod ]
    Subnets:
     Type: List<AWS::EC2::Subnet::Id>
     Description: "The subnets in which the ALB will be deployed (must be in multiple Availability Zones for high availability)"

Resources:
    MySnsTopic:
     Type: AWS::SNS::Topic
     Properties:
       TopicName: MyNatsTopic
    MySnsSubscription:
     Type: AWS::SNS::Subscription
     Properties:
       Protocol: email
       Endpoint: !Ref EmailNotification
       TopicArn: !Ref MySnsTopic
  ##This resource deploy the ECS cluster##
    ECSCluster:
      Type: AWS::ECS::Cluster 
      Properties:
        ClusterName: NATS
        Tags:
        - Key: Name
          Value: !Sub NATS-${EnvironmentName}
  ##SecurityGroup of the instances of ECS limited to the route 10.0.0.0/8##
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the ECS hosts that run containers
        SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/8
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp:  0.0.0.0/0
        VpcId: !Ref 'VPCID'
        Tags:
        - Key: Name
          Value: !Sub LINC-${EnvironmentName}
  ##Is the element that have the responsible for distribute the traffic of the network and the load of work in the server in a private way##
    PrivateLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: !Sub ${EnvironmentName}-LoadBalancer-nats
        Scheme: internal
        Type: network
        Subnets: !Ref Subnets
        SecurityGroups: [!Ref 'PrivateLoadBalancerSG']
        Tags:
          - Key: Owner
            Value: !Sub ${EnvironmentName}
  ##This is a alert that have the function to send a messahe when the count exceeds the threshold for the target group (Nats-4222)"##
    UnhealthyHostCountAlarmNat4222:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "UnhealthyHostCount-Alarm-nats-4222"
        AlarmDescription: "Alarm when unhealthy hosts count exceeds threshold for Target Group nats-4222"
        Namespace: "AWS/NetworkELB"
        MetricName: "UnHealthyHostCount"
        Dimensions:
          - Name: LoadBalancer
            Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
          - Name: TargetGroup
            Value: !GetAtt TargetGroupNATS4222.TargetGroupFullName
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 2
        Threshold: 1
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - !Ref MySnsTopic
        OKActions:
          - !Ref MySnsTopic
  ##This is a alert that have the function to send a messahe when the count exceeds the threshold for the target group (Nats-6222)"##
    UnhealthyHostCountAlarmNat6222:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "UnhealthyHostCount-Alarm-nats-6222"
        AlarmDescription: "Alarm when unhealthy hosts count exceeds threshold for Target Group nats-6222"
        Namespace: "AWS/NetworkELB"
        MetricName: "UnHealthyHostCount"
        Dimensions:
          - Name: LoadBalancer
            Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
          - Name: TargetGroup
            Value: !GetAtt TargetGroupNATS6222.TargetGroupFullName
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 2
        Threshold: 1
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - !Ref MySnsTopic
        OKActions:
          - !Ref MySnsTopic
  ##This is a alert that have the function to send a messahe when the count exceeds the threshold for the target group (Nats-8222)"##
    UnhealthyHostCountAlarmNat8222:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "UnhealthyHostCount-Alarm-nats-8222"
        AlarmDescription: "Alarm when unhealthy hosts count exceeds threshold for Target Group nats-8222"
        Namespace: "AWS/NetworkELB"
        MetricName: "UnHealthyHostCount"
        Dimensions:
          - Name: LoadBalancer
            Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName # Replace with ALB name and ID
          - Name: TargetGroup
            Value: !GetAtt TargetGroupNATS8222.TargetGroupFullName # Replace with TG1 name and ID
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 2
        Threshold: 1
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - !Ref MySnsTopic
        OKActions:
          - !Ref MySnsTopic
  ##Is the group of log streams that monitoring the acces control settings##
    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
         RetentionInDays: 180
         LogGroupName:
            Fn::Join:
            - /
            - - /ecs
              - Ref: EnvironmentName
              - ECS-task-
              - nats
  ##Is the element that have the responsible for distribute the traffic of the network and the load of work in the server in a private way in the security group##
    PrivateLoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: !Sub ${EnvironmentName}-LoadBalancerSG-nats
          GroupDescription: Access to the public facing load balancer
          VpcId: !Ref VPCID
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 8222
              ToPort: 8222
              CidrIp: 10.0.0.0/8  # Allowing HTTP traffic from SourceCIDR
            - IpProtocol: tcp
              FromPort: 4222
              ToPort: 4222
              CidrIp: 10.0.0.0/8 # Allowing HTTPS traffic from SourceCIDR
            - IpProtocol: tcp
              FromPort: 6222
              ToPort: 6222
              CidrIp: 10.0.0.0/8 # Allowing HTTPS traffic from SourceCIDR
          SecurityGroupEgress:
            - IpProtocol: -1  # Allow all outbound traffic (can be restricted further if needed)
              FromPort: -1
              ToPort: -1
              CidrIp: "0.0.0.0/0"  # Allow all outbound traffic by default
          Tags:
            - Key: Owner
              Value: !Sub ${EnvironmentName}
  ##This is the AIM role that have the task when are executed##
    TaskExecutionRole:
     Type: "AWS::IAM::Role"
     Properties:
       AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
           -
             Effect: "Allow"
             Principal:
               Service:
                 - "ec2.amazonaws.com"
                 - 'ecs-tasks.amazonaws.com'
             Action:
               - "sts:AssumeRole"
       Policies:
         - PolicyName: "SSMReadOnlyPolicy"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               - Effect: "Allow"
                 Action:
                   - "ssm:GetParameter"
                   - "ssm:GetParameters"
                   - "ssm:GetParametersByPath"
                   - "ssm:DescribeParameters"
                   - "ssm:GetParameterHistory"
                   - "ssm:ListTagsForResource"
                 Resource: "*"
         - PolicyName: "CloudWatchLogsReadWritePolicy"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               - Effect: "Allow"
                 Action:
                   - "logs:DescribeLogGroups"
                   - "logs:DescribeLogStreams"
                   - "logs:GetLogEvents"
                   - "logs:FilterLogEvents"
                   - "logs:CreateLogGroup"
                   - "logs:CreateLogStream"
                   - "logs:PutLogEvents"
                 Resource: "*"
         - PolicyName: "ECRReadOnlyPolicy"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               - Effect: "Allow"
                 Action:
                   - "ecr:BatchCheckLayerAvailability"
                   - "ecr:DescribeImages"
                   - "ecr:DescribeRepositories"
                   - "ecr:GetDownloadUrlForLayer"
                   - "ecr:ListImages"
                   - "ecr:GetLifecyclePolicy"
                   - "ecr:GetRepositoryPolicy"
                   - "ecr:GetLifecyclePolicyPreview"
                   - "ecr:GetAuthorization"
                   - "ecr:GetAuthorizationToken"
                   - "ecr:BatchGetImage"
                 Resource: "*"
       RoleName: !Sub 'EcsTasksExecutionRole-${EnvironmentName}-nats'
  ##This is the definition that are given for the different task like a microservices##
    MicroserviceTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      DependsOn:
      - LogGroup
      Properties:
        Family:
          Fn::Join:
          - '-'
          - - Ref: EnvironmentName
            - ECS-task
            - nats
        RequiresCompatibilities:
        - EC2
        ExecutionRoleArn:
          Ref: TaskExecutionRole
        ContainerDefinitions:
        - Name:
            Fn::Join:
            - '-'
            - - Ref: EnvironmentName
              - nats
          MemoryReservation: 1024
          Image:
            Fn::Join:
            - ':'
            - - Fn::GetAtt: ECRRepository.RepositoryUri
              - Ref: ImageTag
          Essential: true
          PortMappings:
          - ContainerPort: 4222
            HostPort: 0
          - ContainerPort: 8222
            HostPort: 0
          - ContainerPort: 6222
            HostPort: 0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::Join:
                - /
                - - /ecs
                  - Ref: EnvironmentName
                  - ECS-task-
                  - nats
              awslogs-region:
                Fn::Sub: ${AWS::Region}
              awslogs-stream-prefix: ecs
        Tags:
                - Key: Owner
                  Value: !Sub ${EnvironmentName}
  ##This is the route request to individual registered targets, such EC2 instances using the protocol and port number (6222) that are specify.##
    TargetGroupNATS6222:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Sub ${EnvironmentName}-nats-6222
        HealthCheckIntervalSeconds: 20
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 3
        Port: 6222
        Protocol: TCP
        UnhealthyThresholdCount: 2
        VpcId:  !Ref VPCID
        Tags:
          - Key: Owner
            Value: !Sub ${EnvironmentName}
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
  ##This is the route request to individual registered targets, such EC2 instances using the protocol and port number (4222) that are specify.##
    TargetGroupNATS4222:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Sub ${EnvironmentName}-nats-4222
        HealthCheckIntervalSeconds: 20
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 3
        Port: 4222
        Protocol: TCP
        UnhealthyThresholdCount: 2
        VpcId:  !Ref VPCID
        Tags:
          - Key: Owner
            Value: !Sub ${EnvironmentName}
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
  ##This is the route request to individual registered targets, such EC2 instances using the protocol and port number (8222) that are specify.##
    TargetGroupNATS8222:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Sub ${EnvironmentName}-nats-8222
        HealthCheckIntervalSeconds: 20
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 3
        Port: 8222
        Protocol: TCP
        UnhealthyThresholdCount: 2
        VpcId:  !Ref VPCID
        Tags:
          - Key: Owner
            Value: !Sub ${EnvironmentName}
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
  ##Is the process that checks for connection requests, using the protocol and the port in this case 6222##
    ALBListener6222:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroupNATS6222
        LoadBalancerArn: !Ref PrivateLoadBalancer
        Port: 6222
        Protocol: TCP
  ##Is the process that checks for connection requests, using the protocol and the port##
    ALBListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroupNATS4222
        LoadBalancerArn: !Ref PrivateLoadBalancer
        Port: 4222
        Protocol: TCP
  ##Is the process that checks for connection requests, using the protocol and the port in this case 8222##
    ALBListener8222:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroupNATS8222
        LoadBalancerArn: !Ref PrivateLoadBalancer
        Port: 8222
        Protocol: TCP
  ##This is the IAM role that is used for the ECS elements
    IAMRoleECS:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub ${EnvironmentName}-ecsServiceRole-nats
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
            Tags:
              - Key: Owner
                Value: !Sub ${EnvironmentName}
  ##Is the repository that managed container image registry service that is secure, scalable and reliable##
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "Clave KMS para la encriptación"
        EnableKeyRotation: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: 
                - "kms:*"
              Resource: "*"

  # Alias for the kms key
    MyKMSAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/my-kms-key"
        TargetKeyId: !Ref KMSKey

  # ECR Respository encripted with KMS
    ECRRepository:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: !Join [ "-", [{Ref: EnvironmentName}, 'nats' ] ]
        EncryptionConfiguration:
          EncryptionType: KMS
          KmsKey: !GetAtt KMSKey.Arn
        LifecyclePolicy:
          LifecyclePolicyText: |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep 5 images",
                  "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 5
                  },
                  "action": { "type": "expire" }
                }
              ]
            }
        Tags:
          - Key: Owner
            Value: !Ref EnvironmentName
  ##That are the instances of the container that are running in the cluster in the scaling##
    ContainerInstances:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          ImageId: !Ref 'ECSAMI'
          SecurityGroups: [!Ref 'SecurityGroup']
          InstanceType: !Ref 'InstanceType'
          IamInstanceProfile: !Ref 'EC2InstanceProfile'
          MetadataOptions:
            HttpTokens: required  # Enforces the use of IMDSv2
            HttpPutResponseHopLimit: 2
            HttpEndpoint: enabled
          BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 30
              VolumeType: 'gp3'
              Encrypted: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash -xe
              echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
              echo ECS_ENABLE_CONTAINER_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config
              yum install -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  ##Is the instance of the EC2 profile in IAM## 
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: /
          Roles: [!Ref 'EC2Role']

  # A role used to allow AWS Autoscaling to inspect stats and adjust scaleable targets
  # on your AWS account
    AutoscalingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'application-autoscaling:*'
                - 'cloudwatch:DescribeAlarms'
                - 'cloudwatch:PutMetricAlarm'
                - 'ecs:DescribeServices'
                - 'ecs:UpdateService'
              Resource: '*'
        Tags:
          - Key: Name
            Value: !Sub NATS-${EnvironmentName}

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
    EC2Role:
       Type: AWS::IAM::Role
       Properties:
         AssumeRolePolicyDocument:
           Statement:
           - Effect: Allow
             Principal:
               Service: [ec2.amazonaws.com]
             Action: ['sts:AssumeRole']
         Path: /
         Policies:
         - PolicyName: ecs-service
           PolicyDocument:
             Statement:
             - Effect: Allow
               Action:
                 - 'ecs:CreateCluster'
                 - 'ecs:DeregisterContainerInstance'
                 - 'ecs:DiscoverPollEndpoint'
                 - 'ecs:Poll'
                 - 'ecs:RegisterContainerInstance'
                 - 'ecs:StartTelemetrySession'
                 - 'ecs:Submit*'
                 - 'logs:CreateLogStream'
                 - 'logs:PutLogEvents'
                 - 'ecr:GetAuthorizationToken'
                 - 'ecr:BatchGetImage'
                 - 'ecr:GetDownloadUrlForLayer'
               Resource: '*'
         Tags:
           - Key: Name
             Value: !Sub LINC-${EnvironmentName}
  ##The role used for ECS in IAM##
    ECSRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: AmazonECSContainerServiceRoleNATS
          AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service: [ecs.amazonaws.com]
              Action: ['sts:AssumeRole']
          Path: /
          Policies:
          - PolicyName: ecs-service-nats
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
          Tags:
            - Key: Name
              Value: !Sub LINC-${EnvironmentName}
  ##The fully managed container orchestration service that helps for a easily deploy, manage, and scale containerized applications.
    ECSServiceNATS:
      Type: AWS::ECS::Service
      DependsOn:
        - PrivateLoadBalancer
        - ECSCluster
      Properties:
        ServiceName: nats
        Cluster:
          Fn::GetAtt:
            - ECSCluster
            - Arn
        LoadBalancers:
          - TargetGroupArn:
              Ref: TargetGroupNATS8222
            ContainerName:
              Fn::Join:
                - '-'
                -
                  - Ref: EnvironmentName
                  - nats
            ContainerPort: 8222
          - TargetGroupArn:
              Ref: TargetGroupNATS4222
            ContainerName:
              Fn::Join:
                - '-'
                -
                  - Ref: EnvironmentName
                  - nats
            ContainerPort: 4222
          - TargetGroupArn:
              Ref: TargetGroupNATS6222
            ContainerName:
              Fn::Join:
                - '-'
                -
                  - Ref: EnvironmentName
                  - nats
            ContainerPort: 6222
        DesiredCount:
          Ref: ECSTaskDesiredCount
        LaunchType: EC2
        TaskDefinition:
          Ref: MicroserviceTaskDefinition
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
          DeploymentCircuitBreaker:
            Enable: false
            Rollback: false
        PlacementStrategies:
          - Type: spread
            Field: attribute:ecs.availability-zone
          - Type: spread
            Field: instanceId
        HealthCheckGracePeriodSeconds: 12
        SchedulingStrategy: REPLICA
        DeploymentController:
          Type: ECS
        Tags:
          - Key: Owner
            Value: !Sub ${EnvironmentName}
  ##Is the alarm created by CloudWatch that are activated when the ECS services used more that 80% of CPU for NATS##
    CPUAlarm:
       Type: AWS::CloudWatch::Alarm
       Properties:
         AlarmName: HighCPUUsageECS-NATS
         AlarmDescription: Alarm when ECS service CPU usage exceeds 80% on NATS
         MetricName: CPUUtilization
         Namespace: AWS/ECS
         Statistic: Average
         Period: 300
         EvaluationPeriods: 1
         Threshold: 80
         ComparisonOperator: GreaterThanOrEqualToThreshold
         Dimensions:
           - Name: ClusterName
             Value: !Ref ECSCluster
         AlarmActions:
           - !Ref MySnsTopic
  ##This is the alarm that is activated when the ECS services used more that 80% of memory for the Nats##
    MemoryAlarm:
       Type: AWS::CloudWatch::Alarm
       Properties:
         AlarmName: HighMemoryUsageECSTask-NATS
         AlarmDescription: Alarm when ECS task memory usage exceeds 80% on NATS
         MetricName: MemoryUtilization
         Namespace: AWS/ECS
         Statistic: Average
         Period: 300
         EvaluationPeriods: 1
         Threshold: 80
         ComparisonOperator: GreaterThanOrEqualToThreshold
         Dimensions:
           - Name: ClusterName
             Value: !Ref ECSCluster
         AlarmActions:
           - !Ref MySnsTopic
